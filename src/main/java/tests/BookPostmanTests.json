{
	"variables": [],
	"info": {
		"name": "Book Telosys 3 REST API Tests",
		"description": "Telosys Tools 3 Node.JS Template Book entity generated API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 400",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else if (responseCode.code === 201) {",
							"        tests[\"Status code is 201\"] = responseCode.code === 201;",
							"    } else {",
							"        tests[\"Status code is 400\"] = responseCode.code === 400;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"    tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 400\"] = jsonData.errorCode === 400;",
							"        }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Invalid arguments'\"] = jsonData.message === \"Invalid arguments\";",
							"        }",
							"    } else {",
							"        tests[\"Object value id is correct\"] = jsonData.id === 77;",
							"        tests[\"Object value publisherId is correct\"] = jsonData.publisherId === 77;",
							"        tests[\"Object value authorId is correct\"] = jsonData.authorId === 77;",
							"        tests[\"Object value isbn is correct\"] = jsonData.isbn === \"lorem ipsum\";",
							"        tests[\"Object value title is correct\"] = jsonData.title === \"lorem ipsum\";",
							"        tests[\"Object value price is correct\"] = jsonData.price === \"99.99\";",
							"        tests[\"Object value quantity is correct\"] = jsonData.quantity === 77;",
							"        tests[\"Object value discount is correct\"] = jsonData.discount === 77;",
							"        tests[\"Object value availability is correct\"] = jsonData.availability === 77;",
							"        tests[\"Object value bestSeller is correct\"] = jsonData.bestSeller === 77;",
							"}"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/book",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": 77,\n\t\"publisherId\": 77,\n\t\"authorId\": 77,\n\t\"isbn\": \"lorem ipsum\",\n\t\"title\": \"lorem ipsum\",\n\t\"price\": 99.99,\n\t\"quantity\": 77,\n\t\"discount\": 77,\n\t\"availability\": \"77\",\n\t\"bestSeller\": \"77\"\n}"
				},
				"description": "Create a book"
			},
			"response": []
		},
		{
			"name": "Get one book",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"        tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"    }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"    }",
							"    } else {",
							"        tests[\"Object value id is correct\"] = jsonData.id === 77;",
							"        tests[\"Object value publisherId is correct\"] = jsonData.publisherId === 77;",
							"        tests[\"Object value authorId is correct\"] = jsonData.authorId === 77;",
							"        tests[\"Object value isbn is correct\"] = jsonData.isbn === \"lorem ipsum\";",
							"        tests[\"Object value title is correct\"] = jsonData.title === \"lorem ipsum\";",
							"        tests[\"Object value price is correct\"] = jsonData.price === \"99.99\";",
							"        tests[\"Object value quantity is correct\"] = jsonData.quantity === 77;",
							"        tests[\"Object value discount is correct\"] = jsonData.discount === 77;",
							"        tests[\"Object value availability is correct\"] = jsonData.availability === 77;",
							"        tests[\"Object value bestSeller is correct\"] = jsonData.bestSeller === 77;",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/book/77",
				"method": "GET",
				"header": [],
				"body": {},
				"description": "Get one book"
			},
			"response": []
		},
		{
			"name": "Check if one book exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"        tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"    }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"    }",
							"    } else {",
							"        tests[\"Returned boolean is true\"] = jsonData === true;",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/book/exists/77",
				"method": "GET",
				"header": [],
				"body": {},
				"description": "Check if one book exists"
			},
			"response": []
		},
		{
			"name": "Get all book",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"        tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"    }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"    }",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/book",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": "Get all book"
			},
			"response": []
		},
		{
			"name": "Count all book",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"if (jsonData.errorCode) {",
							"    // Check the content of every value",
							"    if (jsonData.errorCode === 200) {",
							"        tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"        } else {",
							"            tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"    }",
							"    if (jsonData.message === \"Success\") {",
							"        tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"        } else {",
							"            tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"    }",
							"    } else {",
							"        tests[\"Returned value count is an integer\"] = Number.isInteger(jsonData.count);",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/book/count",
				"method": "GET",
				"header": [],
				"body": {},
				"description": "Count all book"
			},
			"response": []
		},
		{
			"name": "Edit a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Check the content of every value",
							"if (jsonData.errorCode === 200) {",
							"    tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"    } else {",
							"        tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"}",
							"if (jsonData.message === \"Success\") {",
							"    tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"    } else {",
							"        tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"}"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/book",
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\": 77,\n\t\"publisherId\": 77,\n\t\"authorId\": 77,\n\t\"isbn\": \"lorem ipsum\",\n\t\"title\": \"lorem ipsum\",\n\t\"price\": 99.99,\n\t\"quantity\": 77,\n\t\"discount\": 77,\n\t\"availability\": \"77\",\n\t\"bestSeller\": \"77\"\n}"
				},
				"description": "Edit a book"
			},
			"response": []
		},
		{
			"name": "Delete a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is 200\"] = responseCode.code === 200;",
							"    } else {",
							"        tests[\"Status code is 404\"] = responseCode.code === 404;",
							"}",
							"",
							"// Test if response has a Content Type",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							"",
							"// Test if Content Type is a json response",
							"tests[\"Content-Type is application/json\"] = ",
							"responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"",
							"// Test if JSON response objects are valid",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Check the content of every value",
							"if (jsonData.errorCode === 200) {",
							"    tests[\"Object errorCode value is 200\"] = jsonData.errorCode === 200;",
							"    } else {",
							"        tests[\"Object errorCode value is 404\"] = jsonData.errorCode === 404;",
							"}",
							"if (jsonData.message === \"Success\") {",
							"    tests[\"Object message value is 'Success'\"] = jsonData.message === \"Success\";",
							"    } else {",
							"        tests[\"Object message value is 'Entity not found'\"] = jsonData.message === \"Entity not found\";",
							"}"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:3000/api/book/77",
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": "Delete a book"
			},
			"response": []
		}
	]
}